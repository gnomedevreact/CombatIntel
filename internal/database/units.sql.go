// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: units.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const assignCommander = `-- name: AssignCommander :one
update units set commander_id = $1 returning id, created_at, updated_at, name, commander_id
`

func (q *Queries) AssignCommander(ctx context.Context, commanderID pgtype.UUID) (Unit, error) {
	row := q.db.QueryRow(ctx, assignCommander, commanderID)
	var i Unit
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.CommanderID,
	)
	return i, err
}

const createUnit = `-- name: CreateUnit :one
insert into units (id, name, commander_id)
values (
    gen_random_uuid(),
    $1,
    $2
) returning id, created_at, updated_at, name, commander_id
`

type CreateUnitParams struct {
	Name        string
	CommanderID pgtype.UUID
}

func (q *Queries) CreateUnit(ctx context.Context, arg CreateUnitParams) (Unit, error) {
	row := q.db.QueryRow(ctx, createUnit, arg.Name, arg.CommanderID)
	var i Unit
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.CommanderID,
	)
	return i, err
}

const deleteUnit = `-- name: DeleteUnit :exec
delete from units where id = $1
`

func (q *Queries) DeleteUnit(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteUnit, id)
	return err
}

const getAllUnits = `-- name: GetAllUnits :many
select id, created_at, updated_at, name, commander_id from units
`

func (q *Queries) GetAllUnits(ctx context.Context) ([]Unit, error) {
	rows, err := q.db.Query(ctx, getAllUnits)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Unit
	for rows.Next() {
		var i Unit
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Name,
			&i.CommanderID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
